<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd">

    <bean class="kp.app.security.AppSecurityConfigurationListener"/>

    <!-- Define any javax.servlet.Filter beans you want anywhere in this application context.   -->
    <!-- They will automatically be acquired by the 'shiroFilter' bean above and made available -->
    <!-- to the 'filterChainDefinitions' property.  Or you can manually/explicitly add them     -->
    <!-- to the shiroFilter's 'filters' Map if desired. See its JavaDoc for more details.       -->
    <!--<bean id="someFilter" class="..."/>-->

    <!-- =========================================================
         Shiro Core Components - Not Spring Specific
         ========================================================= -->

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        <property name="sessionMode" value="native"/>
        <property name="sessionManager" ref="sessionManager"/>
        <property name="realm" ref="appRealm"/>
    </bean>

    <bean id="appRealm" class="kp.app.security.AppRealm">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName">
                    <util:constant static-field="org.apache.shiro.crypto.hash.Sha256Hash.ALGORITHM_NAME"/>
                </property>
                <property name="storedCredentialsHexEncoded" value="false"/>
            </bean>
        </property>
    </bean>

    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="sessionDAO">
            <bean id="enterpriseCacheSessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO"/>
        </property>
    </bean>

    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManager" ref="ehcacheManager"/>
    </bean>


    <!-- =========================================================
         Shiro Spring-specific integration
         ========================================================= -->
    <!-- Post processor that automatically invokes init() and destroy() methods
         for Spring-configured Shiro objects so you don't have to
         1) specify an init-method and destroy-method attributes for every bean
            definition and
         2) even know which Shiro objects require these methods to be
            called. -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after
         the lifecycleBeanProcessor has run: -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- Secure Spring remoting:  Ensure any Spring Remoting method invocations can be associated
         with a Subject for security checks. -->
    <bean id="secureRemoteInvocationExecutor" class="org.apache.shiro.spring.remoting.SecureRemoteInvocationExecutor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="loginUrl" value="/"/>
        <property name="unauthorizedUrl" value="/401"/>
        <property name="securityManager" ref="securityManager"/>
        <property name="filterChainDefinitions">
            <value>
                /**/.svn/** = roles[nobody]
                <!--/app00200/protectedResource = authcBasic
                /app00200/protectedAnnotatedRoleResource = authcBasic
                /app00200/protectedAnnotatedAuthenticatedResource = authcBasic-->
            </value>
        </property>
    </bean>

    <bean id="securityDataUtil" class="kp.app.security.SecurityDataUtil"/>

    <!-- convenience beans to inject security into routes -->
  <bean id="ACTION_READ" class="java.lang.String">
    <constructor-arg value="READ"/>
  </bean>

  <bean id="ACTION_CREATE" class="java.lang.String">
    <constructor-arg value="CREATE"/>
  </bean>

  <bean id="ACTION_UPDATE" class="java.lang.String">
    <constructor-arg value="UPDATE"/>
  </bean>

  <bean id="ACTION_DELETE" class="java.lang.String">
    <constructor-arg value="DELETE"/>
  </bean>

  <bean id="ACTION_EXISTS" class="java.lang.String">
    <constructor-arg value="EXISTS"/>
  </bean>

  <bean id="ACTION_DESCRIBE" class="java.lang.String">
    <constructor-arg value="DESCRIBE"/>
  </bean>

</beans>