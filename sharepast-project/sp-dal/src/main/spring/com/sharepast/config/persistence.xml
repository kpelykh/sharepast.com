<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <context:component-scan base-package="com.sharepast.dal"/>

    <!-- Connection Pooling -->

    <bean id="appDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url.app}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="testConnectionOnCheckin" value="true"/>
        <property name="testConnectionOnCheckout" value="true"/>
    </bean>


    <!-- Liquibase updates -->

    <!--<bean id="dbMigrator" class="liquibase.integration.spring.SpringLiquibase">
        <property name="dataSource" ref="appDataSource" />
        <property name="changeLog" value="classpath:com/sharepast/database/master.xml" />
    </bean>-->

    <!-- Session and Transaction -->

    <!-- enable the configuration of transactional behavior based on annotations -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

   <bean id="sessionFactory"
          class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="appDataSource"/>
        <property name="packagesToScan">
            <list>
                <value>com.sharepast.dal.domain</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>

                <prop key="hibernate.dialect">${hibernate.dialect}</prop>

                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <prop key="hibernate.use_sql_comments">false</prop>
                <prop key="hibernate.max_fetch_depth">1</prop>

                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <prop key="hibernate.connection.autocommit">${hibernate.connection.autocommit}</prop>
                <prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
                <prop key="hibernate.connection.isolation">${hibernate.connection.isolation}</prop>

                <prop key="hibernate.generate_statistics">false</prop>
                <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory</prop>
                <prop key="hibernate.cache.use_second_level_cache">false</prop>
                <prop key="hibernate.cache.use_query_cache">false</prop>
                <prop key="hibernate.cache.use_minimal_puts">true</prop>
                <prop key="hibernate.cache.use_structured_entries">false</prop>
                <prop key="hibernate.cache.max_fetch_depth">3</prop>

                <prop key="hibernate.c3p0.min_size">10</prop>
                <prop key="hibernate.c3p0.max_size">100</prop>
                <prop key="hibernate.c3p0.timeout">7200</prop>
                <prop key="hibernate.c3p0.acquireRetryAttempts">30</prop>
                <prop key="hibernate.c3p0.acquireIncrement">5</prop>
                <prop key="hibernate.c3p0.idleConnectionTestPeriod">600</prop>
                <prop key="hibernate.c3p0.initialPoolSize">20</prop>
                <prop key="hibernate.c3p0.maxPoolSize">100</prop>
                <prop key="hibernate.c3p0.maxIdleTime">300</prop>
                <prop key="hibernate.c3p0.maxStatements">50</prop>
                <prop key="hibernate.c3p0.minPoolSize">10</prop>
                <prop key="hibernate.c3p0.preferredTestQuery">SELECT 1</prop>
                <prop key="hibernate.c3p0.testConnectionOnCheckout">true</prop>

            </props>
        </property>
        <!--<property name="eventListeners">
            <map>
                <entry key="pre-insert">
                    <bean class="com.sharepast.persistence.hibernate.HibernateInsertListener"/>
                </entry>
                <entry key="pre-delete">
                    <bean class="com.sharepast.persistence.hibernate.HibernateDeleteListener"/>
                </entry>
            </map>
        </property>-->
    </bean>

    <bean id="hibernateExceptionTranslator" class="org.springframework.orm.hibernate4.HibernateExceptionTranslator"/>


    <!-- ========================= TRANSACTION MANAGEMENT ========================= -->

    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>

    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory">
            <ref local="sessionFactory"/>
        </property>
    </bean>

    <!--For @Transactional-->
    <bean id="txAspect" class="org.springframework.transaction.aspectj.AnnotationTransactionAspect"
            factory-method="aspectOf">
        <property name="transactionManager">
            <ref local="transactionManager"/>
        </property>
    </bean>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!-- the transactional semantics... -->
        <tx:attributes>
            <!-- all methods starting with 'get' are read-only -->
            <tx:method name="find*" propagation="REQUIRED" read-only="true"
                       rollback-for="com.sharepast.persistence.exceptions.ServiceException"/>
            <tx:method name="get*" propagation="REQUIRED" read-only="true"
                       rollback-for="com.sharepast.persistence.exceptions.ServiceException"/>
        </tx:attributes>
    </tx:advice>

    <tx:advice id="ormAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="got" propagation="REQUIRED" read-only="true" rollback-for="com.sharepast.persistence.exceptions.ServiceException"/>
            <tx:method name="get" propagation="REQUIRED" read-only="true" rollback-for="com.sharepast.persistence.exceptions.ServiceException"/>
            <tx:method name="list" propagation="REQUIRED" read-only="true" rollback-for="com.sharepast.persistence.exceptions.ServiceException"/>
            <tx:method name="scroll" propagation="REQUIRED" read-only="true" rollback-for="com.sharepast.persistence.exceptions.ServiceException"/>
            <tx:method name="sice" propagation="REQUIRED" read-only="true" rollback-for="com.sharepast.persistence.exceptions.ServiceException"/>
            <tx:method name="persist" propagation="REQUIRED" read-only="false" rollback-for="com.sharepast.persistence.exceptions.ServiceException"/>
            <tx:method name="delete" propagation="REQUIRED" read-only="false" rollback-for="com.sharepast.persistence.exceptions.ServiceException"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="hibernateMethodsPcut" expression="execution(* com.sharepast.dal.dao.*.*(..))"/>
        <aop:pointcut id="ormMethodsPcut" expression="execution(* com.sharepast.persistence.orm.ORMDao.*(..))"/>
        <aop:advisor advice-ref="ormAdvice" pointcut-ref="ormMethodsPcut"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="hibernateMethodsPcut"/>
    </aop:config>

</beans>