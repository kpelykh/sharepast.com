package kp.app.util;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.reflect.Field;
import java.nio.charset.Charset;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by IntelliJ IDEA.
 * User: Kostya
 * Date: 1/14/11
 * Time: 2:08 AM
 * To change this template use File | Settings | File Templates.
 */
public class Build {
    private static final Logger LOG = LoggerFactory.getLogger(Build.class);

    private volatile static String version;
    private volatile static String timestamp;
    private volatile static String moduleName;
    private volatile static String uniqueId;

    protected static volatile BuildComponentClasspathMetadata streamBuilder = new BuildComponentClasspathMetadata();

    public static final String NA = "none";
    public static final String NA_ID = "20090101100000";
    // Mon Dec 07 16:10:23 PST 2009
    private static DateFormat FMT_IN = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
    private static DateFormat FMT_OUT = new SimpleDateFormat("yyyyMMddHHmmss");

    public static final String UNIQUE_ID_COMPONENT = "sp-config";

    public static final String[] modules = new String[]
            {
                      "sp-assembly"
                    , "sp-config"
                    , "sp-container"
                    , "sp-dal"
                    , "sp-gui"
                    , "sp-jms"
                    , "sp-parent-pom"
                    , "sp-service"
                    , "sp-util"
            };

    public static final Map<String, String> components = new HashMap<String, String>(modules.length);

    public static final Map<String, String> componentVersions = new HashMap<String, String>(modules.length);

    public static final Map<String, String> componentTimestamps = new HashMap<String, String>(modules.length);

    public static String getVersion() {
        return check("version");
    }

    public static String getUniqueBuildId() {
        if (uniqueId != null)
            return uniqueId;

        check(moduleName);

        String ts = componentTimestamps.get(UNIQUE_ID_COMPONENT);
        if (ts == null)
            return uniqueId = NA_ID;

        try {
            Date dt = FMT_IN.parse(ts);
            return uniqueId = FMT_OUT.format(dt);
        } catch (ParseException e) {
            LOG.error(String.format("error parsing date %s - %s", ts, e.getMessage()));
            return uniqueId = NA_ID;
        }
    }

    public static String getTimestamp() {
        return check("timestamp");
    }

    public static String getModule() {
        return check("moduleName");
    }

    public static Map<String, String> getComponents() {
        check("moduleName");

        return components;
    }

    private static String check(String val) {

        String result = Build.getStaticFieldValue(val);

        if (result != null)
            return result;

        try {
            read();
        } catch (IOException e) {
            return NA;
        }

        result = Build.getStaticFieldValue(val);

        if (result == null)
            return NA;

        return result;
    }

    protected static void read()
            throws IOException {
        if (version != null)
            return;

        InputStream is;

        for (String module : modules) {
            is = streamBuilder.getStream(module);
            if (is != null)
                processComponent(module, is);
        }
    }

    private static void processComponent(String module, InputStream is)
            throws IOException {

        if (is == null)
            return;
/*
#Generated by Maven
#Mon Oct 05 19:59:00 PDT 2009
version=1.0-alpha-2-SNAPSHOT
groupId=ly.app
artifactId=sp-assembly
 */
        BufferedReader r = new BufferedReader(new InputStreamReader(is, Charset.forName("utf8")));

        moduleName = module;

        String line;

        while ((line = r.readLine()) != null) {
            if (line.startsWith("#")) {
                if (line.indexOf("Maven") != -1)
                    continue;

                timestamp = line.substring(1);
            } else if (line.startsWith("version")) {
                version = line.substring(8);
                break;
            }
        }

        r.close();

        components.put(module, String.format("version %s, built on %s", version, timestamp));
        componentVersions.put(module, version);
        componentTimestamps.put(module, timestamp);
    }

    private static String getStaticFieldValue(String fieldName) {

        try {
            Field field = Build.class.getDeclaredField(fieldName);
            return (String) field.get("");
        } catch (NoSuchFieldException e) {
            return null;
        } catch (IllegalAccessException e) {
            return null;
        } catch (Exception e) {
            return null;
        }
    }
}
